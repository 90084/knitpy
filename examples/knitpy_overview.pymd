---
title: "knitpy: dynamic report generation with python"
author: "Jan Schulz"
date: "12.03.2015"
output:
  pdf_document: default
  word_document: default
  html_document:
    keep_md: yes
---

This is a port of knitr (http://yihui.name/knitr/) and rmarkdown 
(http://rmarkdown.rstudio.com/) to python.

For a complete description of the code format see http://rmarkdown.rstudio.com/ and replace
`{r...}` by `{python ...}` and of course use python code blocks...

## Examples

Here are some examples:

```{python}
print("Execute some code chunk and show the result")
```

### Code chunk arguments

You can use different arguments in the codechunk declaration. Using `echo=False` will not show the code but only the result.

```{python echo=False}
print("Only the output will be visible as `echo=False`")
```

The next paragraphs explores the code chunk argument `results`. 

If 'hide', knitpy will not display the code's results in the final document. If 'hold', knitpy will delay displaying all output pieces until the end of the chunk. If 'asis', knitpy will pass through results without reformatting them (useful if results return raw HTML, etc.)

`results='hold'` is not yet implemented.

```{python results="hide"}
print("Only the input is displayed, not the output")
```

```{python results="markup", echo=False}
print("This is formatted as markdown:\n**This text** will be bold...")
```

```{python results="asis", echo=False}
print("**This text** will be bold...")
```

Using `eval=False`, one can hide a code chunk completely: it won't be executed and it won't be shown between this text ...

```{python eval=False}
print("**This text** will be bold...")
```

... and this text here!

You can also not show codeblocks at all, but they will be run (not included codeblock sets `have_run = True`):

```{python include=False}
have_run = True
print("## This will show as a real headline")
```

```{python include=True}
if have_run == True:
    print("'have_run==True': ran the codeblock before this one.")
```

### Inline code

You can also include code inline: "m=`python 1+1`" (expected: "m=2") 


### IPython / Jupyter display framework

The display framework is also supported.

Plots will be included as images and included in the document. The filename of the 
plot is derived from the chunk label ("sinus" in this case). The code is not 
shown in this case (`echo=False`).

```{python sinus, echo=False}
# As this all produces no output, it should go into the same input section...
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
y = np.linspace(2, 10)
line, = plt.plot(y, np.sin(y))
```

If a html or similar thing is displayed via the IPython display framework, it will be 
included 'as is', meaning that apart from `text/plain`-only output, everything else 
will be included without marking it up as output. 

```{python engine="python"}
# As this all produces no output, it should go into the same input section...
from IPython.core.display import display, HTML
display(HTML("<strong>strong text</strong>"))
```

It even handles pandas.DataFrames:

```{python}
import pandas as pd
pd.set_option("display.width", 200) 
strlong = """This is very long text which should be displayed but not destroy the formats... Therefore we add a lot of text here and look how long the table row can become..."""
df = pd.DataFrame({"a":[strlong,2,3,4,5],"b":["a","b","c",strlong,"e"]})
df
```

`pandas.DataFrame` can be represented as `text/plain` or `text/html`. Unfortunately, pandoc cannot convert `html` to `docx`. If this document is converted into `docx`, the above will be displayed as `text/plain`, which looks like the following:

```{python}
pd.set_option("display.notebook_repr_html", False) 
df
# set back the display 
pd.set_option("display.notebook_repr_html", True) 
```

It's possible to get around this limitation by using the [tabulate](https://bitbucket.org/astanin/python-tabulate) package together with `results="asis"`. Unfortunately, this still breaks in latex/pdf documents :-/

```{python results="asis"}
from tabulate import tabulate
from IPython.core.display import display, Markdown
# either print and use `results="asis"`
print(tabulate(df, list(df.columns), tablefmt="simple"))
# or use the IPython display framework to publish markdown
Markdown(tabulate(df, list(df.columns), tablefmt="simple"))
```

Make very sure that the `DataFrame` is not too long...

### Error handling

Errors in code are shown with a bold error text:

```{python}
import sys
print(sys.not_available)
```

```{python}
for x in []:
print("No indention...")
```
